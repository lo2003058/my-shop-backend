datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Customer {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  password        String
  first_name      String?
  last_name       String?
  country_code    String?
  phone           String?
  isEmailVerified Boolean  @default(false)
  isPhoneVerified Boolean  @default(false)
  isSubscribed    Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  customerPoints   CustomerPoints @relation(fields: [customerPointsId], references: [id])
  customerPointsId Int            @unique

  tier             Tier?              @relation(fields: [tierId], references: [id])
  tierId           Int?               @default(1)
  Order            Order[]
  customerAddress  CustomerAddress[]
  customerWishList CustomerWishList[]
}

model CustomerAddress {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  country_code String
  phone        String
  address      String
  city         String
  state        String
  country      String
  zipCode      String
  isDefault    Boolean  @default(false)
  customer     Customer @relation(fields: [customerId], references: [id])
  customerId   Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model CustomerPoints {
  id                     Int       @id @default(autoincrement())
  currentPoints          Int       @default(0)
  accumulatedPoints      Int       @default(0)
  totalAccumulatedPoints Int       @default(0)
  customer               Customer? @relation
}

model CustomerWishList {
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId Int
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@id([customerId, productId])
}

model Tier {
  id             Int        @id @default(autoincrement())
  name           String     @unique
  requiredPoints Int        @unique
  customer       Customer[]
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String             @unique
  description      String?
  price            Float              @default(0)
  stock            Int                @default(0)
  isVirtual        Boolean            @default(false)
  imageUrl         String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  OrderProduct     OrderProduct[]
  CustomerWishlist CustomerWishList[]
}

model Order {
  id            Int            @id @default(autoincrement())
  customer      Customer       @relation(fields: [customerId], references: [id])
  customerId    Int
  tax           Float
  shippingFee   Float
  originalTotal Float
  total         Float
  status        Int            @default(0) // 0: Pending, 1: Processing, 2: Completed, 3: Cancelled
  pointsEarned  Int            @default(0)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  OrderProduct  OrderProduct[]
  Payment       Payment[]
}

model OrderProduct {
  id        Int @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int @default(1)

  product Product @relation(fields: [productId], references: [id])
  order   Order   @relation(fields: [orderId], references: [id])

  @@unique([orderId, productId])
}

model Payment {
  id              Int      @id @default(autoincrement())
  order           Order    @relation(fields: [orderId], references: [id])
  orderId         Int
  method          String
  paymentImgaeUrl String
  status          Int      @default(0) // 0: Pending, 1: Paid, 2: Failed
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}
